@{
    Layout = "~/_Layout.cshtml";
    Page.Title = string.Format("Razor - {0}", "CRUD - Update/Discontinue/Delete with Validation");

    var pid = Request.QueryString["pid"];
    if (pid.IsEmpty())
    {
        Response.Redirect("Exercise04_A.cshtml");
    }
    var productid = Request.Form["ProductID"];
    var productname = Request.Form["ProductName"];
    var supplierid = Request.Form["SupplierList"];
    var categoryid = Request.Form["CategoryList"];
    var quantityperunit = Request.Form["QuantityPerUnit"];
    var unitprice = Request.Form["UnitPrice"];
    var unitsinstock = Request.Form["UnitsInStock"];
    var unitsonorder = Request.Form["UnitsOnOrder"];
    var reorderlevel = Request.Form["ReorderLevel"];
    var discontinued = Request.Form["Discontinued"];
    var thebutton = Request.Form["theButton"];

    var message = "";

    //these are validator controls execute on the server side

    Validation.Add("ProductName",
         Validator.Required("Product name is required"),
         Validator.StringLength(40, 1, "Product name is limited to 40 characters"));

    Validation.Add("CategoryList",
         Validator.Range(1, 9, "Category is required"));

    Validation.Add("QuantityPerUnit",
         Validator.StringLength(20, 0, "Quantity per unit is limited to 20 characters"));

    Validation.Add("UnitPrice",
        Validator.Decimal("Unit price is a money field."),
        Validator.Range(0.00, 99.00, "Unit price must be 0.00 or more"));

    Validation.Add("UnitsInStock",
        Validator.Integer("Units in stock must be a number."),
        Validator.Range(0, 32767, "Units in stock must be between 0 and 32767"));

    Validation.Add("UnitsOnOrder",
        Validator.Integer("Units on order must be a number."),
        Validator.Range(0, 32767, "Units on order must be between 0 and 32767"));

    Validation.Add("ReorderLevel",
        Validator.Integer("Reorder level must be a number."),
        Validator.Range(0, 32767, "Reorder level must be between 0 and 32767"));

    if (IsPost)
    {
        //discontinued is a checkbox
        //the possible values from the check box is null (not checked) or "on" (checked)
        //the acceptable sql values for a bit are 0 and 1
        if (discontinued == null)
        {
            discontinued = "0";
        }
        else
        {
            discontinued = "1";
        }
    }
    else
    {
        productid = pid;
        discontinued = "0";
    }
    var db = Database.Open("NWDB");
    var supplierStatement = "SELECT SupplierID, CompanyName "
                        + "FROM Suppliers "
                        + "ORDER BY CompanyName";
    var querySuppliers = db.Query(supplierStatement);
    var categoryStatement = "SELECT CategoryID, CategoryName "
                        + "FROM Categories "
                        + "ORDER BY CategoryName";
    var queryCategories = db.Query(categoryStatement);
    var queryStatement = "SELECT ProductID, ProductName, SupplierID, "
                        + "CategoryID, QuantityPerUnit, UnitPrice, "
                        + "UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued "
                        + "FROM Products "
                        + "WHERE ProductID = @0";
    var queryProducts = db.QuerySingle(queryStatement, pid);
    if (queryProducts == null)
    {
        message = "Product NOT found";
    }
}

@section head{
    @*<link href="~/Content/MyCssCopy.css" rel="stylesheet" />*@
}

@section banner{
    <h1>@Page.Title</h1>
}
@if (IsPost)
{
    if (thebutton.Equals("backtosearch"))
    {
        Response.Redirect("Exercise04_A.cshtml");
    }

    if (Validation.IsValid())
    {
        try
        {
            if (thebutton.Equals("discontinue"))
            {
                var sqlcommand = "UPDATE Products SET "
                                + "Discontinued = 1 "
                                + "WHERE ProductID = @0";
                var rowsaffected = db.Execute(sqlcommand, productid);
                if (rowsaffected > 0)
                {
                    discontinued = "1";
                    message = "Product has been DISCONTINUED";
                }
                else
                {
                    message = "Product NOT found";
                }
            }
            else if (thebutton.Equals("update"))
            {
                var sqlcommand = "UPDATE Products SET "
                                + "ProductName = @0, "
                                + "SupplierID = @1, "
                                + "CategoryID = @2, "
                                + "QuantityPerUnit = @3, "
                                + "UnitPrice = @4, "
                                + "UnitsInStock = @5, "
                                + "UnitsOnOrder = @6, "
                                + "ReorderLevel = @7, "
                                + "Discontinued = @8 "
                                + "WHERE ProductID = @9";
                var rowsaffected = db.Execute(sqlcommand, productname,
                    supplierid.Equals("0") ? null : supplierid,
                    categoryid.Equals("0") ? null : categoryid,
                    string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                    string.IsNullOrEmpty(unitprice) ? null : unitprice,
                    string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                    string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                    string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel,
                    discontinued, productid);
                if (rowsaffected > 0)
                {
                    message = "Product has been UPDATED";
                }
                else
                {
                    message = "Product NOT found";
                }
            }
            else if (thebutton.Equals("delete"))
            {
                var deleteStatement = "Delete Products WHERE ProductID = @0";

                var rows = db.Execute(deleteStatement, productid);
                if (rows == 1)
                {
                    message = "Product has been DELETED";
                }
                else
                {
                    message = "Product NOT found";
                }
                productid = "";
                productname = "";
                supplierid = "0";
                categoryid = "0";
                quantityperunit = "";
                unitprice = "";
                unitsinstock = "";
                unitsonorder = "";
                reorderlevel = "";
                discontinued = "0";
            }
        }
        catch (Exception ex)
        {
            <div class="col-12 text-center">
                <p style="color:firebrick; font-size:large">
                    Processing error: @ex.Message
                </p>
            </div>
        }
    }
}
else //IsPost=false
{
    if (message != "Product NOT found")
    {
        productid = queryProducts.ProductID.ToString();
        productname = queryProducts.ProductName;
        supplierid = queryProducts.SupplierID == null ? "0" : queryProducts.SupplierID.ToString();
        categoryid = queryProducts.CategoryID == null ? "0" : queryProducts.CategoryID.ToString();
        quantityperunit = queryProducts.QuantityPerUnit;
        unitprice = queryProducts.UnitPrice == null ? "" : queryProducts.UnitPrice.ToString();
        unitsinstock = queryProducts.UnitsInStock == null ? "" : queryProducts.UnitsInStock.ToString();
        unitsonorder = queryProducts.UnitsOnOrder == null ? "" : queryProducts.UnitsOnOrder.ToString();
        reorderlevel = queryProducts.ReorderLevel == null ? "" : queryProducts.ReorderLevel.ToString();
        discontinued = queryProducts.Discontinued.ToString();
    }

}
@Html.ValidationSummary()

<div class="col-12 text-center">
    <p style="color:green">
        @message
    </p>
</div>
<form id="theForm" action="" method="post">
    <div class="row row-cols-2">
        <div class="col text-right">
            <label id="lblProductID" for="ProductID">Product ID</label>
        </div>
        <div class="col text-left">
            <input type="text" name="ProductID" value="@productid" readonly />
        </div><br />
        <div class="col text-right">
            <label id="lblProductName" for="ProductName">Product Name</label>
        </div>
        <div class="col text-left">
            <input type="text" name="ProductName" value="@productname" />
        </div><br />
        <div class="col text-right">
            <label id="lblSupplierList" for="SupplierList">Supplier</label>
        </div>
        <div class="col text-left">
            <select name="SupplierList">
                <option value="0">select...</option>
                @foreach (var acollectionrow in querySuppliers)
                {
                    if (acollectionrow.SupplierID.ToString() == supplierid)
                    {
                        <option value="@acollectionrow[0]" selected>@acollectionrow[1]</option>
                    }
                    else
                    {
                        <option value="@acollectionrow[0]">@acollectionrow[1]</option>
                    }
                }
            </select>
        </div><br />
        <div class="col text-right">
            <label id="lblCategoryList" for="CatgoryList">Category</label>
        </div>
        <div class="col text-left">
            <select name="CategoryList">
                <option value="0">select...</option>
                @foreach (var acollectionrow in queryCategories)
                {
                    if (acollectionrow.CategoryID.ToString() == categoryid)
                    {
                        <option value="@acollectionrow[0]" selected>@acollectionrow[1]</option>
                    }
                    else
                    {
                        <option value="@acollectionrow[0]">@acollectionrow[1]</option>
                    }
                }
            </select>
        </div><br />
        <div class="col text-right">
            <label id="lblQuantityPerUnit" for="QuasntityPerUnit">Quantity Per Unit</label>
        </div>
        <div class="col text-left">
            <input type="text" name="QuantityPerUnit" value="@quantityperunit" />
        </div><br />
        <div class="col text-right">
            <label id="lblUnitPrice" for="UnitPrice">Unit Price</label>
        </div>
        <div class="col text-left">
            <input type="number" name="UnitPrice" value="@unitprice" step="0.01" />
        </div><br />
        <div class="col text-right">
            <label id="lblUnitsInStock" for="UnitsInStock">Units In Stock</label>
        </div>
        <div class="col text-left">
            <input type="number" name="UnitsInStock" value="@unitsinstock" />
        </div><br />
        <div class="col text-right">
            <label id="lblUnitsOnOrder" for="UnitsOnOrder">Units On Order</label>
        </div>
        <div class="col text-left">
            <input type="number" name="UnitsOnOrder" value="@unitsonorder" /><br />
        </div><br />
        <div class="col text-right">
            <label id="lblReorderLevel" for="ReorderLevel">ReorderLevel</label>
        </div>
        <div class="col text-left">
            <input type="number" name="ReorderLevel" value="@reorderlevel" />
        </div><br />
        <div class="col text-right">
            <label id="lblDiscontinued" for="Discontinued">Discontinued</label>
        </div>
        <div class="col text-left">
            @if (discontinued.Equals("True") || (discontinued == "1"))
            {
                <input type="checkbox" name="Discontinued" checked value="1" />
            }
            else
            {
                <input type="checkbox" name="Discontinued" value="0" />
            }
        </div><br />
    </div>
    <div class="row">
        <div class="col-12 text-center">
            <button type="submit" name="theButton" id="theUpdate" class="btn btn-primary"
                    value="update">
                Update
            </button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theDiscontinue" class="btn btn-primary" formnovalidate
                    value="discontinue">
                Discontinue
            </button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theDelete" class="btn btn-primary" formnovalidate
                    value="delete">
                Delete Record
            </button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theCancel" class="btn btn-primary" formnovalidate
                    value="backtosearch">
                Back to Search
            </button>
        </div>
    </div>
    @* confirmation can be done on a button click using javascript
        we will ask the user to confirm the discontinuing of a product*@
    <script type="text/javascript">
        document.getElementById("theDiscontinue").onclick = ConfirmDiscontinue;
        function ConfirmDiscontinue() {
            return confirm("Are you sure you want to DISCONTINUE @productname?");
        }
        document.getElementById("theDelete").onclick = ConfirmDelete;
        function ConfirmDelete() {
            return confirm("Are you sure you want to DELETE @productname?");
        }
    </script>
</form>
@{
    Layout = "~/_Layout.cshtml";
    Page.Title = string.Format("Razor - {0}", "Exercise 03");

    //consider your need for global variables
    var productname = "";
    var supplierid = "0";
    var categoryid = "0";
    var quantityperunit = "";
    var unitprice = "";
    var unitsinstock = "";
    var unitsonorder = "";
    var reorderlevel = "";

    var db = Database.Open("NWDB");
    var supplierquery = "SELECT SupplierID, CompanyName "
            + "FROM Suppliers "
            + "Order by CompanyName";
    var supplierlist = db.Query(supplierquery);
    var categoryquery = @"SELECT CategoryID, CategoryName "
            + "FROM Categories "
            + "Order by CategoryName";
    var categorylist = db.Query(categoryquery);


    //these are validator controls execute on the server side

    Validation.Add("ProductName",
         Validator.Required("Product name is required"),
          Validator.StringLength(40, 1, "Product name is limited to 40 characters"));

    Validation.Add("CategoryList",
         Validator.Range(1, 9, "Category is required"));

    Validation.Add("QuantityPerUnit",
 Validator.StringLength(20, 0, "Quantity per unit is limited to 20 characters"));

    Validation.Add("UnitPrice",
        Validator.Decimal("Unit price is a money field."),
        Validator.Range(0.00, 99.00, "Unit price must be 0.00 or more"));

    Validation.Add("UnitsInStock",
        Validator.Integer("Units in stock must be a number."),
        Validator.Range(0, 32767, "Units in stock must be between 0 and 32767"));

    Validation.Add("UnitsOnOrder",
        Validator.Integer("Units on order must be a number."),
        Validator.Range(0, 32767, "Units on order must be between 0 and 32767"));

    Validation.Add("ReorderLevel",
        Validator.Integer("Reorder level must be a number."),
        Validator.Range(0, 32767, "Reorder level must be between 0 and 32767"));

    //compare two fields together (ie password)
    //Validation.Add("ConfirmPassword",
    //    Validator.Required("Missing confirm password"),
    //      Validator.StringLength(160, 1, "Confirm password is too long"),
    //      Validator.EqualsTo("Password", "Password not confirmed"));

    //pattern testing (ie PostalCode)
    //Validation.Add("PostalCode",
    //     Validator.Regex(@"^[A-Za-z][0-9][A-Za-z][0-9][A-Za-z][0-9]$",
    //     "Postal Code format invalid (T7T7T7"));
}
@section head{
    @*<link href="~/Content/MyCssCopy.css" rel="stylesheet" />*@
}

@section banner{
    <h1>@Page.Title</h1>
}

@if (IsPost)
{
    productname = Request.Form["ProductName"];
    supplierid = Request.Form["SupplierList"];
    categoryid = Request.Form["CategoryList"];
    quantityperunit = Request.Form["QuantityPerUnit"];
    unitprice = Request.Form["UnitPrice"];
    unitsinstock = Request.Form["UnitsInStock"];
    unitsonorder = Request.Form["UnitsOnOrder"];
    reorderlevel = Request.Form["ReorderLevel"];
    var thebutton = Request.Form["FormButton"];

    if (thebutton.Equals("Clear")) //pressed the CLEAR button
    {
        productname = "";
        supplierid = "0";
        categoryid = "0";
        quantityperunit = "";
        unitprice = "";
        unitsinstock = "";
        unitsonorder = "";
        reorderlevel = "";
    }
    else //pressed the ADD button
    {
        if (Validation.IsValid())
        {
            try
                {
                    @*var inscommand = "INSERT INTO Products "
                        + "(ProductName, SupplierID, CategoryID, "
                        + "QuantityPerUnit, UnitPrice, UnitsInStock, "
                        + "UnitsOnOrder, ReorderLevel, Discontinued) "
                        + "VALUES(@0, @1, @2, @3, @4, @5, @6, @7, 0)";
                    db.Execute(inscommand, productname,
                        supplierid.Equals("0") ? null : supplierid,
                        categoryid.Equals("0") ? null : categoryid,
                        string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                        string.IsNullOrEmpty(unitprice) ? null : unitprice,
                        string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                        string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                        string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel);
                    <div class="col-12 text-center">
                        <p style="color:green">
                            Product has been ADDED
                        </p>
                    </div>*@
                }
                catch (Exception ex)
                {
                    <div class="col-12 text-center">
                        <p style="color:firebrick; font-size:large">
                            Processing error: @ex.Message
                        </p>
                    </div>
                }
        }
    }
}
else
{

}
@Html.ValidationSummary()
<form id="theForm" action="" method="post">
    <div class="row row-cols-2">
        <div class="col text-right">
            <label id="lblProductName" for="ProductName">Product Name</label>
        </div>
        <div class="col text-left">
            <input type="text" name="ProductName" value="@productname" />
        </div><br />
        <div class="col text-right">
            <label id="lblSupplierList" for="SupplierList">Supplier</label>
        </div>
        <div class="col text-left">
            <select name="SupplierList">
                <option value="0">select...</option>
                @foreach (var acollectionrow in supplierlist)
                {
                    if (acollectionrow.SupplierID.ToString() == supplierid)
                    {
                        <option value="@acollectionrow[0]" selected>@acollectionrow[1]</option>
                    }
                    else
                    {
                        <option value="@acollectionrow[0]">@acollectionrow[1]</option>
                    }
                }
            </select>
        </div><br />
        <div class="col text-right">
            <label id="lblCategoryList" for="CatgoryList">Category</label>
        </div>
        <div class="col text-left">
            <select name="CategoryList">
                <option value="0">select...</option>
                @foreach (var acollectionrow in categorylist)
                {
                    if (acollectionrow.CategoryID.ToString() == categoryid)
                    {
                        <option value="@acollectionrow[0]" selected>@acollectionrow[1]</option>
                    }
                    else
                    {
                        <option value="@acollectionrow[0]">@acollectionrow[1]</option>
                    }
                }
            </select>
        </div><br />
        <div class="col text-right">
            <label id="lblQuantityPerUnit" for="QuasntityPerUnit">Quantity Per Unit</label>
        </div>
        <div class="col text-left">
            <input type="text" name="QuantityPerUnit" value="@quantityperunit" />
        </div><br />
        <div class="col text-right">
            <label id="lblUnitPrice" for="UnitPrice">Unit Price</label>
        </div>
        <div class="col text-left">
            <input type="number" name="UnitPrice" value="@unitprice" step="0.01" />
        </div><br />
        <div class="col text-right">
            <label id="lblUnitsInStock" for="UnitsInStock">Units In Stock</label>
        </div>
        <div class="col text-left">
            <input type="number" name="UnitsInStock" value="@unitsinstock" step="1" />
        </div><br />
        <div class="col text-right">
            <label id="lblUnitsOnOrder" for="UnitsOnOrder">Units On Order</label>
        </div>
        <div class="col text-left">
            <input type="number" name="UnitsOnOrder" value="@unitsonorder" step="1" /><br />
        </div><br />
        <div class="col text-right">
            <label id="lblReorderLevel" for="ReorderLevel">ReorderLevel</label>
        </div>
        <div class="col text-left">
            <input type="number" name="ReorderLevel" value="@reorderlevel" step="1" />
        </div><br />
    </div>
    <div class="row">
        <div class="col-12 text-center">
            <input type="submit" id="theAdd" name="FormButton"
                   class="btn btn-primary" value="Add" />
            <input type="submit" id="theClear" name="FormButton" formnovalidate
                   class="btn" value="Clear" />
        </div>
    </div>
    @* confirmation can be done on a button click using javascript
        we will ask the user to confirm the insertion of a product*@
    <script type="text/javascript">
        document.getElementById("theAdd").onclick = ConfirmAdd;
        function ConfirmAdd() {
            return confirm("Are you sure you want to ADD @productname?");
        }
    </script>
</form>